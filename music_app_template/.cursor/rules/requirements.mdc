---
alwaysApply: true
---
# Copyright (c) 2025 Jaewoo Kim
# MIT License - https://opensource.org/licenses/MIT

# 1. 배경과 목적

- 이 웹 애플리케이션은 관리자가 환상적인 아티스트와 노래를 수동으로 추가하고 공개 및 공유 할 수있는 웹사이트를 제공합니다.
- 대상 사용자는 새로운 음악과의 만남을 요구하는 음악 팬입니다.

## 시스템 아키텍처

```mermaid
graph TD
    A[사용자] -->|접속| B[프론트엔드 SvelteKit]
    B <-->|API| C[백엔드 SvelteKit]
    C <-->|ORM| D[(데이터베이스 SQLite)]
    E[관리자] -->|관리| B
    F[로컬스토리지] <-->|즐겨찾기| B
```

---

# 2. 기능 요구사항

## 2.1 관리 화면 로그인 기능
- **기능 개요**：관리자가 시크릿 키의 완전 일치로 관리 화면에 로그인합니다.

## 2.2 아티스트 추가 기능
- **기능 개요**：관리자가 아티스트 이름, 프로필, 이미지 등을 수동으로 추가합니다.

## 2.3 아티스트 편집 기능
- **기능 개요**：관리자가 기존 아티스트 정보를 편집합니다.

## 2.4 곡 추가 기능
- **기능 개요**：관리자가 아티스트에 곡을 수동으로 추가합니다.

## 2.5 곡 편집 기능
- **기능 개요**：관리자가 기존 곡 정보를 편집합니다.

## 2.6 곡 재생 기능
- **기능 개요**：사용자가 공개된 곡을 재생하고 기본적인 음악 플레이어 기능을 제공합니다.
- **재생 위젯**：관리 화면 이외의 모든 페이지에서 항상 표시되며 재생 상태를 유지합니다.

## 2.7 즐겨찾기 기능
- **기능 개요**：사용자가 곡을 즐겨찾기에 추가하고 브라우저의 로컬 스토리지에 저장합니다. 데이터베이스에는 저장하지 않습니다.
- **상세**：즐겨찾기 모듈을 사용하여 즐겨찾기의 추가, 삭제, 조회를 수행합니다. `localStorage`를 이용하여 곡 ID를 저장합니다.

## 2.8 사용자 작업에 대한 피드백
- **기능 개요**：사용자 작업에 따라 적절한 피드백을 제공합니다.

---

# 3. 비기능 요구사항

- **지원하는 디바이스**：PC만 지원（최신 데스크톱 웹 브라우저）
- **로그인 기능**：사용자 로그인 기능은 필요 없음
- **UI 디자인**：반드시 Tailwind CSS를 사용하고, CSS 스타일은 직접 작성하지 않음
  - 색상, 글꼴, 버튼 스타일 통일
  - 시각적 계층 구조 명확화
  - **요소 배경색**：요소 배경색은`bg-gray-800`을 사용함
  - **페이지 배경색**：페이지 전체 배경색은`bg-gray-700`을 사용함
- **접근성 요구사항**：
  - 키보드 조작 대응
- **파일 업로드 처리**：
  - 이미지, 음성 파일은 /static/upload/ 디렉토리 아래에 저장하는 것으로 실현함
- **API의 요청 형식**：API는 모두 FormData 형식으로 수행할 것


---

# 4. 제약 사항

- **프론트엔드**： HTML5, CSS3, JavaScript, SvelteKit
- **백엔드**： SvelteKit (Bun)
- **데이터베이스**： SQLite
- **ORM**： Prisma
- **개발 환경**： 로컬 환경에서 동작
- **보안 대책**： 본 애플리케이션은 바이브코딩 교육용으로 이용하는 샘플 애플리케이션이므로, 이용하는 라이브러리로 상식적으로 대응할 수 있는 범위 이상의 보안 대책은 수행하지 않습니다.
- **데이터베이스 사양**： 이미지나 음성 파일은 URL이 아니라, 파일 시스템상의 경로만을 데이터베이스에 저장합니다.
- **이미지 저장 디렉토리**： 이미지 파일은 `./static/uploads/` 디렉토리에 저장합니다.
- **SVG 코드 저장 디렉토리**：SVG 코드는 `docs/svg/` 디렉토리에 저장됩니다。

---

# 5. 유스 케이스

## 5.1 관리자가 관리 화면에 로그인하고 새로운 아티스트를 추가하는 기능
- **작업 절차**：
  1. 시크릿 키를 입력하고 로그인 버튼을 클릭
  2. 관리 대시보드에서 "아티스트 추가" 버튼을 클릭
  3. 아티스트 정보를 입력하고 "저장" 버튼을 클릭
- **피드백**：
  - 로그인 실패 시 에러 메시지를 표시
  - 저장 성공 시 "아티스트가 추가되었습니다"라는 알림을 표시

## 5.2 관리자가 기존 아티스트에 새로운 곡을 추가하는 기능
- **작업 절차**：
  1. 관리 대시보드에서 대상 아티스트를 선택
  2. "곡 추가" 버튼을 클릭
  3. 곡 정보를 입력하고 "저장" 버튼을 클릭
- **피드백**：
  - 입력 오류 시 에러 메시지를 표시
  - 저장 성공 시 "곡이 추가되었습니다"라는 알림을 표시

## 5.3 관리자가 기존 아티스트나 곡을 편집하는 기능
- **작업 절차**：
  1. 아티스트 또는 곡 목록에서 대상을 선택
  2. "편집" 버튼을 클릭
  3. 정보를 업데이트하고 "저장" 버튼을 클릭
- **피드백**：
  - 업데이트 성공 시 "정보가 업데이트되었습니다"라는 알림을 표시

## 5.4 사용자가 웹사이트에서 새로운 음악을 발견하고 곡을 재생하는 기능
- **작업 절차**：
  1. 홈페이지에서 관심 있는 곡의 "재생" 버튼을 클릭
  2. 재생 위젯에서 재생 및 일시정지를 수행
- **피드백**：
  - 재생 시작 시 재생 위젯에 곡 정보를 표시
  - 페이지 전환 후에도 재생이 계속되며 위젯이 표시

## 5.5 사용자가 마음에 드는 곡을 즐겨찾기에 추가하고 나중에 재생하는 기능
- **작업 절차**：
  1. 곡의 "즐겨찾기에 추가" 버튼을 클릭
  2. 즐겨찾기 페이지에서 곡을 선택하고 재생 버튼을 클릭
- **피드백**：
  - 추가 성공 시 "즐겨찾기에 추가되었습니다"라는 알림을 표시
  - 즐겨찾기에서 곡을 삭제할 때 확인 메시지를 표시

---
# 6. 필요한 페이지 목록（공통 요소 포함）

## 6.0 공통 요소

### 6.0.1 헤더
  - **개요**: 모든 페이지에 표시되는 헤더
  - **UI 컴포넌트**
    - 로고(🚀의 이모지이지만, 클릭하면 홈페이지로 이동)
    - 글로벌 내비게이션 메뉴(홈, 즐겨찾기 링크만 구성함)

### 6.0.2 재생 위젯
- **개요**: 사용자가 곡을 재생・일시정지할 수 있는 위젯. 재생 상태, 곡 정보, 재생 시간, 음량을 관리하고 사용자에게 시각적인 피드백을 제공합니다.
- **디자인**
- 전체 레이아웃：
  - 화면 하단에 고정되어 전체 너비, 다크 그레이 배경(bg-gray-800)에 흰색 텍스트.
  - 패딩된 콘텐츠(p-4)를 플렉스 레이아웃으로 배치하여 아이템을 중앙에 배치하고 간격을 균등하게 함
- 곡 정보(왼쪽)：
  - 16x16픽셀의 앨범 아트 이미지.
  - 크게 굵은 글꼴로 곡 제목을 표시하고 이미지의 오른쪽에 아티스트 이름을 작은 글꼴로 표시함
- 재생 컨트롤(중앙)：
  - 원형의 재생/일시정지 버튼(흰색 배경, 다크 그레이 아이콘).
  - 버튼은 재생(오른쪽 방향의 삼각형)과 일시정지(2개의 세로선)의 SVG 아이콘으로 구성함
- 진행 바(컨트롤 옆)：
  - 시간 표시: "M:SS / M:SS"형식.
  - 얇은(h-1) 진행 바, 너비 40유닛:
    - 회색의 배경(전체 시간).
    - 흰색의 전경(현재 위치).
- 음량 조절(오른쪽)：
  - 스피커 아이콘(SVG).
  - 수평의 음량 슬라이더, 너비 20유닛.
- **UI 컴포넌트**：
  - 곡명 표시: 현재 재생 중인 곡의 제목을 표시합니다.
  - 아티스트명 표시: 현재 재생 중인 곡의 아티스트명을 표시합니다.
  - 아트워크 표시: 현재 재생 중인 곡의 앨범 아트를 표시합니다. 재생되지 않는 상태에서는/img/song_default.webp를 표시합니다.
  - 재생/일시정지 버튼: 재생 중인 곡을 일시정지하거나, 일시정지 중인 곡을 재생합니다.
  - 재생 진행 바: 현재의 재생 위치를示す 바. 재생 시간과 곡의 총 시간을 표시합니다.
  - 음량 조절 바: 음량을 조절하기 위한 슬라이더. 사용자가 음량을 변경할 수 있습니다.
  - 재생 상태 모니터링: 재생 상태, 곡 정보, 재생 시간, 음량을 모니터링하고 UI에 반영합니다.
  - 시간 포맷 함수: 재생 시간을 분과 초의 형식으로 포맷합니다.
  - 재생/일시정지 핸들러: 재생 버튼 또는 일시정지 버튼이 클릭되었을 때의 처리를 수행합니다.

### 6.0.3 아티스트 카드
- **개요**: 아티스트의 정보를 표시하는 카드
- **속성**：
  - `artist`: 아티스트 객체（`Artist`형）
- **UI 컴포넌트**：
  - 아티스트 이미지: 아티스트의 이미지를 표시합니다.
  - 아티스트명: 아티스트의 이름을 표시합니다.
  - 프로필: 아티스트의 프로필이나 설명을 표시합니다.
  - 링크: 아티스트 상세 페이지로의 링크를 설정합니다.

### 6.0.4 곡 카드
- **개요**: 곡의 정보를 표시하는 카드
- **속성**：
  - `song`: 곡 객체（`SongWithArtist`형）
- **UI 컴포넌트**：
  - **앨범 아트**: 곡의 앨범 아트를 표시합니다.
  - **곡명**: 곡의 제목을 표시합니다.
  - **아티스트명**: 곡의 아티스트명을 표시하고, 아티스트 상세 페이지로의 링크를 설정합니다.
  - **재생 버튼**: 곡을 재생하기 위한 버튼. 클릭 이벤트로 곡의 재생을 시작합니다.
  - **즐겨찾기 추가 버튼**: 곡을 즐겨찾기에 추가하거나 삭제하기 위한 버튼. 클릭 이벤트로 즐겨찾기의 추가 또는 삭제를 수행합니다.
  - **재생 상태 모니터링**: 재생 상태를 모니터링하고 UI에 반영합니다.
  - **즐겨찾기 상태 모니터링**: 즐겨찾기 상태를 모니터링하고 UI에 반영합니다.

## 6.1 사용자 페이지

### 6.1.1 홈페이지 (/)

- **개요**：곡이나 아티스트를 표시할 수 있습니다.
- **공통 UI 요소**：
  - **재생 위젯**（관리 화면 이외의 모든 페이지에 표시）
- **주요 UI 컴포넌트**：
  - **곡・아티스트 카드 표시**
    - 이미지
    - 이름
    - 재생 버튼
    - 즐겨찾기 추가 버튼

### 6.1.2 아티스트 상세 페이지 (/artists/[id])

- **개요**：아티스트의 정보나 곡 목록을 표시하고 재생할 수 있습니다.
- **공통 UI 요소**：
  - **헤더**
  - **재생 위젯**
  - **곡 카드**
- **주요 UI 컴포넌트**：
  - **아티스트 정보 섹션(ArtistCard는 사용하지 않음)**
    - 이미지
    - 이름
    - 프로필
  - **곡 목록**
    - 곡명
    - 재생 버튼
    - 즐겨찾기 추가 버튼

### 6.1.3 즐겨찾기 페이지(/favorite)

- **개요**：사용자의 즐겨찾기 곡을 표시하고 관리・재생할 수 있습니다.
- **공통 UI 요소**：
  - **헤더**
  - **재생 위젯**
- **주요 UI 컴포넌트**：
  - **즐겨찾기 곡 목록**
    - 곡명
    - 아티스트명
    - 재생 버튼
    - 삭제 버튼


## 6.2 관리자 페이지

### 6.2.1 관리자 로그인 페이지(/admin/login)

- **개요**：시크릿 키를 입력하여 관리 화면에 로그인합니다.
- **공통 UI 요소**：
  - **헤더**
    - 로고
- **주요 UI 컴포넌트**：
  - **시크릿 키 입력 필드**：보안 비밀번호 입력 필드.
  - **로그인 버튼**：클릭하여 인증을 수행합니다.
  - **에러 메시지 표시 영역**：인증 실패 시 에러를 표시합니다。

### 6.2.2 관리자 화면 톱(/admin)
- **개요**：아티스트와 곡의 데이터를 일元 관리할 수 있는 관리자 톱 페이지. 현상은 특히 표시할 요소가 존재하지 않기 때문에 /admin/artists/로 리다이렉트합니다.

#### 아티스트 관리 페이지(/admin/artists/)
- **개요**：아티스트의 목록 표시, 추가, 편집을 수행합니다.
- **API**：
  - GET /api/artist 아티스트 정보의 조회
  - POST /admin/api/artist 아티스트의 추가
  - PUT /admin/api/artist/[id] 아티스트의 업데이트
- **UI 컴포넌트**：
  - **아티스트 목록 테이블**：
    - 아티스트명
    - 등록일
    - 곡 관리 페이지로의 링크(/admin/artists/[id]/songs)
    - 편집 버튼

  - **신규 아티스트 추가 버튼**
  - **신규 아티스트 추가 모달**
    - 아티스트명
    - 프로필
    - 아티스트 사진(이미지)

#### 곡 관리 페이지(/admin/artists/[id]/songs)

- **개요**：곡의 목록 표시나 상세 정보 관리를 수행합니다.
- **API**：
  - GET /api/songs 곡의 조회
  - POST /admin/api/songs 곡 정보의 추가
  - PUT /admin/api/songs 곡 정보의 업데이트
- **UI 컴포넌트**：
  - **곡 목록 테이블**：
    - 곡명
    - 아티스트명
    - 음성 파일
    - 편집 버튼
  - **신규 곡 추가 버튼**
  - **신규 곡 추가 모달**
    - 곡명
    - 아티스트명
    - 음성 파일
    - 곡 이미지

---

# 7. 모듈
## 7.1 Player 모듈
Player 모듈은 곡의 재생, 정지, 즐겨찾기 관리, 음량 조절 기능을 제공합니다. 이 모듈은 다음과 같은 기능을 가지고 있습니다.

### 7.1.1 재생 기능
- **함수명**: `playSong`
- **인수**: `song: Song`
- **설명**: 지정된 곡을 재생합니다. 새로운 오디오 객체를 생성하고, 메타데이터가 로드되었을 때 곡의 길이를 설정합니다. 재생이 종료되었을 때 재생 상태를 업데이트합니다. 이미 재생되고 있는 곡이 동일한 곡인 경우 재생을 재개하고, 다른 경우에는 한 번 파기하고 재생을 시작합니다.

### 7.1.2 정지 기능
- **함수명**: `stopSong`
- **인수**: 없음
- **설명**: 현재 재생 중인 곡을 정지합니다. 재생 상태를 업데이트하고, 오디오를 일시 정지합니다. 오디오 객체는 파기하지 않으며, 다시 playSong 함수가 실행되었을 때 중간부터 재생할 수 있도록 합니다.

### 7.1.6 음량 조절 기능
- **함수명**: `setVolume`
- **인수**: `volume: number`
- **설명**: 현재 오디오의 음량을 설정합니다.

### 7.1.7 스토어
- **`isPlaying`**: 현재의 재생 상태를 유지하는 Svelte의 writable 스토어.
- **`currentSong`**: 현재 재생 중인 곡을 유지하는 Svelte의 writable 스토어.
- **`currentAudio`**: 현재의 오디오 객체를 유지하는 Svelte의 writable 스토어.
- **`audioDuration`**: 현재의 오디오의 길이를 유지하는 Svelte의 writable 스토어.
- **`playbackTime`**: 현재의 재생 시간을 유지하는 Svelte의 readable 스토어.
- **`currentVolume`**: 현재의 음량을 유지하는 Svelte의 writable 스토어.

### 7.1.8 에러 처리
- **설명**: Player 모듈 내의 각 함수는, 재생 시에 에러가 발생한 경우, 상세한 에러 메시지를 콘솔에 출력합니다. 여기에는, 에러의 종류, 메시지, 스택 트레이스, 발생한 함수명, 에러가 발생한 곡의 ID나 URL 등의 정보가 포함됩니다. 에러 처리는 try-catch 블록을 사용하여, 에러를 포착하고 Console 탭에 표시하도록 처리합니다. 또한, 사용자에게는 에러 발생을 통지하고, 재생이 이루어지지 않았던 이유를 명확히 전달함으로써, 에러 조사가 용이해집니다.

## 7.2 즐겨찾기 모듈

즐겨찾기 모듈은, 사용자가 곡을 즐겨찾기에 추가, 삭제, 조회하는 기능을 제공합니다. 이 모듈은 다음과 같은 기능을 가지고 있습니다.

### 7.2.1 즐겨찾기 추가 기능
- **함수명**: `addToFavorite`
- **인수**: `songId: number`
- **설명**: 지정된 곡 ID를 즐겨찾기 목록에 추가합니다. 로컬 스토리지에 저장됩니다.

### 7.2.2 즐겨찾기 삭제 기능
- **함수명**: `removeFromFavorite`
- **인수**: `songId: number`
- **설명**: 지정된 곡 ID를 즐겨찾기 목록에서 삭제합니다. 로컬 스토리지에 저장됩니다.

### 7.2.3 즐겨찾기 조회 기능
- **함수명**: `getFavorite`
- **인수**: 없음
- **설명**: 로컬 스토리지에서 즐겨찾기 목록을 조회합니다.

### 7.2.4 스토어
- **`favoriteIds`**: 즐겨찾기 곡 ID 목록을 유지하는 Svelte의 writable 스토어.

---